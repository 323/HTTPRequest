h2. Welcome to the home of HTTPRequest, a simple Java HTTPWrapper

Keep in mind, this code is open source and can be modified and distributed freely.

h3. What is HTTPRequest

HTTPRequest.java is a simple HTTP Wrapper that allows both HTTP get and post requests in Java as well as user specification of headers and cookies.

h3. Using HTTPRequest

The use of HTTPRequest is pretty straightforward.

The following should shed some light on the different functionalities of these classes, however the Tester.java class should also provide some examples of functon usage.


h3. Importing the Package

The inclusion of the .jar file included in this repository will vary, depending on what IDE you're using.

Once you've included the package in your project to import simply use @import httplib.HTTPRequest;@ to access HTTPRequest's full functionality.

h3. Creating an Object

@HTTPRequest request = new HTTPRequest();@

Creates a simple request object. This can alos be done wtih a String type argument of the URL.

h3. Specifying a URL

As stated before this can be done in the object instantiation or by using the function @setURL@ as follows:

@reqest.setURL("http://google.com/");@

The URL can also be retrieved using @getURL@.

h3. Setting Headers

There are a number of functions for setting headers. These headers will apply to both post and get requests.

@setUserAgent(String userAgent);@
@setAccept(String type, String language, String charset);@
@setKeepAlive(String keepAlive);@
@setConnection(String connection);@
@setReferer(String referer);@
@setContent(String type, String length, Sting language);@

The content type and content length for post requests is automatically set to application/x-www-form-urlencoded and the length of the post data, respectively.

Every one of these functions has its own "getter" method which returns the variable associated with it.

h3. Using a GET request

To use a GET request simplys call @request.get()@ with or without parameters.

@request.get();@
@request.get(String link);@

h4. Inner Workings

The process of the GET request is simple, after setting a few properties such as redirect following and user interation allowance, the GET request process sets headers and cookies (according to those previously specified). Then the process reads the response from the web page, closes the reader, updates cookies, and finally sets the referer. The return of the function is the response of the web page.

h3. Using a POST request

To use a POST request you can call @request.post(parameters)@ with or without a URL parameters.

@request.get(parameters);@
@request.get(link, parameters);@

h4. Inner Workings

The process of the POST request is very similar to the GET request, the only differences are that the POST request sets a Content Type and Content Length property as well as writing data to a web page.

h3. Cookies

A cookie object is created at initialization and can be accessed outside the Wrapper using the variable name @myCookie@.
s
Cookie creation comes with tis own seperate class, Cookie.java.
This class stores cookies in an ArrayList and contains the following functions.

Retrieves a specific cookie
@getCookie(String cookie);@

Sets the cookies in the Cookie class
@setCookies(String theCookies);@

Gets the cookies from the Cookie class
@getCookies();@

Updates the cookies in the Cookie class according to a URLConnection
@updateCookies(URLConnection theConnection);@

Removes a specific cookie
@removeCookie(String cookie);@

Clears all cookies in the Cookie class
@clearCookies();@

h3. Bugs & Questions

Any bugs encountered or questions about the code provided here should be directed to contact.isonyx@gmail.com

Thanks, and good luck with the code.